

// std::span
//! A span is a view (i.e. non-owning) of a container providing bounds-checked access to a contiguous group of elements. 
//! Since views do not own their elements they are cheap to construct and copy -- 
//! a simplified way to think about views is they are holding references to their data. Spans can be dynamically-sized or fixed-sized.


void f(std::span<int> ints) {
	std::for_each(ints.begin(), ints.end(), [](auto i) {
		cout << " i :" << i << endl;
	});
}

	std::vector<int> v = { 1, 2, 3 };
	f(v);
	
	
Example: as opposed to maintaining a pointer and length field, a span wraps both of those up in a single container.

constexpr size_t LENGTH_ELEMENTS = 3;
int* arr = new int[LENGTH_ELEMENTS]; // arr = {0, 0, 0}

// Fixed-sized span which provides a view of `arr`.
std::span<int, LENGTH_ELEMENTS> span = arr;
span[1] = 1; // arr = {0, 1, 0}

// Dynamic-sized span which provides a view of `arr`.
std::span<int> d_span = arr;
span[0] = 1; // arr = {1, 1, 0}
constexpr size_t LENGTH_ELEMENTS = 3;
int* arr = new int[LENGTH_ELEMENTS];

std::span<int, LENGTH_ELEMENTS> span = arr; // OK
std::span<double, LENGTH_ELEMENTS> span2 = arr; // ERROR
std::span<int, 1> span3 = arr; // ERROR